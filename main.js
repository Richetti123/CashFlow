import Boom from '@hapi/boom';
import NodeCache from 'node-cache';
import P from 'pino';
import chalk from 'chalk'; // Importamos chalk para los colores en la consola
import yargs from 'yargs'; // Importamos yargs para analizar argumentos de l√≠nea de comandos
import { createInterface } from 'readline'; // Importamos readline para interactuar con la consola

import {
    makeWASocket,
    useMultiFileAuthState,
    makeInMemoryStore,
    DisconnectReason,
    delay,
    fetchLatestBaileysVersion // Importar para obtener la √∫ltima versi√≥n
} from '@whiskeysockets/baileys';

import {
    readFileSync,
    existsSync,
    writeFileSync,
    readdirSync, // Sincr√≥nico para clearTmp
    unlinkSync // Sincr√≥nico para clearTmp
} from 'fs';
import {
    join
} from 'path';
import {
    fileURLToPath
} from 'url';
import util from 'util';
import Datastore from '@seald-io/nedb';
import {
    sendAutomaticPaymentRemindersLogic
} from './plugins/recordatorios.js';

// Importaciones de 'fs/promises' para operaciones as√≠ncronas
import {
    readdir,
    unlink,
    stat
} from 'fs/promises';

// Importaciones adicionales de tu main (2).js para la l√≥gica de conexi√≥n
import pkg from 'google-libphonenumber';
const { PhoneNumberUtil } = pkg;
const phoneUtil = PhoneNumberUtil.getInstance();

const __filename = fileURLToPath(import.meta.url);
const __dirname = join(__filename, '..');

// --- DEFINICIONES PROVISIONALES PARA global.mid y global.lenguajeGB ---
// Si ya tienes estas definiciones en tu config.js o en otro archivo,
// POR FAVOR, ELIMINA ESTAS L√çNEAS para evitar conflictos.
global.mid = {
    methodCode1: "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê·®í‚ïê‚ïç‚ïê‚ïç‚ïê‚ú¶‚ïê‚ïç‚ïê‚ïç‚ïê·®í‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó",
    methodCode2: "‚ïë  [ *SELECCIONE EL TIPO DE CONEXI√ìN* ]  ‚ïë",
    methodCode3: "OPCI√ìN",
    methodCode4: "CONECTAR POR C√ìDIGO QR",
    methodCode5: "CONECTAR POR C√ìDIGO DE 8 D√çGITOS",
    methodCode6: "‚ï∞‚ïê‚ñ∂Ô∏è SI NO SABES C√ìMO ELEGIR",
    methodCode7: "         ELIJE LA OPCI√ìN 1",
    methodCode8: "PARA M√ÅS DETALLES, UTILICE LA L√çNEA DE COMANDOS",
    methodCode9: "node . --qr",
    methodCode10: "node . --code <numero>",
    methodCode11: (chalk) => `[ ${chalk.bold.redBright('‚ùå ERROR')} ] POR FAVOR, SELECCIONE UN N√öMERO ENTRE EL 1 O EL 2`,
    methodCode12: 'Conexi√≥n por c√≥digo QR',
    methodCode13: 'Conexi√≥n por c√≥digo de 8 d√≠gitos',
    methodCode14: 'Inicia el bot normalmente',
    phNumber2: (chalk) => `[ ${chalk.bold.greenBright('‚ö†Ô∏è INGRESAR N√öMERO')} ] POR FAVOR, INGRESE SU N√öMERO DE WHATSAPP CON EL C√ìDIGO DE PA√çS. EJEMPLO: ${chalk.yellow('52155XXXXXXXX')}\n---> `,
    pairingCode: '[ ‚ö†Ô∏è C√ìDIGO DE EMPAREJAMIENTO ]',
    mCodigoQR: 'ESCANEA EL C√ìDIGO QR', // A√±adido de tu main (2).js
    mConexion: '¬°CONEXI√ìN ESTABLECIDA CORRECTAMENTE!' // A√±adido de tu main (2).js
};

global.lenguajeGB = {
    smsClearTmp: () => 'Archivos temporales limpiados.',
    smspurgeSession: () => 'Sesi√≥n principal purgada.',
    smspurgeOldFiles: () => 'Archivos antiguos purgados.',
    smsCargando: () => 'Cargando bot...',
    smsMainBot: () => 'Detectado cambio en main.js. Recargando...',
    smsConexionOFF: () => `[ ‚ö†Ô∏è ] SESI√ìN CERRADA. ¬°¬°VUELVA A ESCANEAR EL C√ìDIGO QR O INGRESE UN C√ìDIGO DE 8 D√çGITOS!!`,
    smsConexioncerrar: () => `[ ‚ö†Ô∏è ] LA CONEXI√ìN SE HA CERRADO, SE INTENTAR√Å RECONECTAR...`,
    smsConexionperdida: () => `[ ‚ö†Ô∏è ] LA CONEXI√ìN SE HA PERDIDO CON EL SERVIDOR, SE INTENTAR√Å RECONECTAR...`,
    smsConexionreem: () => `[ ‚ö†Ô∏è ] CONEXI√ìN REEMPLAZADA, SE HA ABIERTO OTRA NUEVA SESI√ìN, CIERRE LA SESI√ìN ACTUAL PRIMERO.`,
    smsConexionreinicio: () => `[ ‚ö†Ô∏è ] REQUERIDO REINICIO, RECONECTANDO...`,
    smsConexiontiem: () => `[ ‚ö†Ô∏è ] TIEMPO DE CONEXI√ìN AGOTADO, RECONECTANDO...`,
    smsConexiondescon: (reason, connection) => {
        let message = `[ ‚ùå ] MOTIVO DE DESCONEXI√ìN DESCONOCIDO`;
        if (reason) message += `: ${reason}`;
        if (connection) message += ` | ${connection}`;
        return message;
    },
    smsWelcome: () => 'Bienvenido al grupo.',
    smsBye: () => 'Adi√≥s del grupo.',
    smsSpromote: () => 'Fue promovido a administrador.',
    sdemote: () => 'Fue degradado de administrador.',
    smsSdesc: () => 'Se ha cambiado la descripci√≥n del grupo.',
    smsSsubject: () => 'Se ha cambiado el nombre del grupo.',
    smsSicon: () => 'Se ha cambiado la foto de perfil del grupo.',
    smsSrevoke: () => 'Se ha cambiado el enlace de invitaci√≥n del grupo.',
    smspurgeOldFiles1: () => 'Archivo antiguo eliminado:',
    smspurgeOldFiles2: () => 'en sub-bot',
    smspurgeOldFiles3: () => 'Error al eliminar',
    smspurgeOldFiles4: () => 'Error al eliminar archivo residual',
    smspurgeSessionSB1: () => 'No se encontraron pre-keys antiguas en sub-bots para eliminar.',
    smspurgeSessionSB2: () => 'Pre-keys antiguas eliminadas de sub-bots.',
    smspurgeSessionSB3: () => 'Error al purgar sesi√≥n de sub-bots:'
};
// --- FIN DE DEFINICIONES PROVISIONALES ---


// --- Configuraci√≥n de la Base de Datos Nedb ---
global.db = {
    data: {
        users: {},
        chats: {},
        settings: {},
        ...(existsSync('./src/database.json') && JSON.parse(readFileSync('./src/database.json')))
    }
};

const collections = ['users', 'chats', 'settings'];
collections.forEach(collection => {
    global.db.data[collection] = new Datastore({
        filename: `./src/${collection}.db`,
        autoload: true
    });
    global.db.data[collection].loadDatabase();
});

// --- Almacenamiento en Memoria para Baileys ---
const store = makeInMemoryStore({
    logger: P().child({
        level: 'silent',
        stream: 'store'
    })
});

// --- Cache para mensajes ---
const msgRetryCounterCache = new NodeCache();

// --- FUNCIONES DE LIMPIEZA Y MANTENIMIENTO ---

/**
 * Elimina todos los archivos de la carpeta 'tmp'.
 */
function clearTmp() {
    const tmpDir = join(__dirname, 'tmp');
    if (!existsSync(tmpDir)) {
        console.log(chalk.yellow(`[‚ö†] Carpeta temporal no encontrada: ${tmpDir}`));
        return;
    }
    try {
        const filenames = readdirSync(tmpDir);
        filenames.forEach(file => {
            const filePath = join(tmpDir, file);
            try {
                unlinkSync(filePath);
                // console.log(chalk.green(`[üóëÔ∏è] Archivo temporal eliminado: ${file}`));
            } catch (err) {
                // console.error(chalk.red(`[‚ö†] Error al eliminar temporal ${file}: ${err.message}`));
            }
        });
        console.log(chalk.bold.cyanBright(`[üîµ] Archivos temporales eliminados de ${tmpDir}`));
    } catch (err) {
        console.error(chalk.red(`[‚ö†] Error general al limpiar 'tmp': ${err.message}`));
    }
}

/**
 * Limpia la carpeta de sesiones principal, eliminando pre-keys antiguas y otros archivos no esenciales.
 */
async function cleanMainSession() {
    const sessionDir = './sessions'; // Tu carpeta de sesiones
    try {
        if (!existsSync(sessionDir)) {
            console.log(chalk.yellow(`[‚ö†] Carpeta de sesiones no encontrada: ${sessionDir}`));
            return;
        }
        const files = await readdir(sessionDir);
        const now = Date.now();
        const twentyFourHoursAgo = now - (24 * 60 * 60 * 1000); // 24 horas en milisegundos

        let cleanedFilesCount = 0;

        for (const file of files) {
            const filePath = join(sessionDir, file);
            // Evitar eliminar creds.json que es esencial para la sesi√≥n
            if (file === 'creds.json') {
                // console.log(chalk.yellow(`[‚ÑπÔ∏è] Manteniendo archivo esencial: ${file}`));
                continue;
            }

            try {
                const fileStats = await stat(filePath);

                // Si es un archivo pre-key y es antiguo (m√°s de 24 horas)
                if (file.startsWith('pre-key-') && fileStats.mtimeMs < twentyFourHoursAgo) {
                    await unlink(filePath);
                    console.log(chalk.green(`[üóëÔ∏è] Pre-key antigua eliminada: ${file}`));
                    cleanedFilesCount++;
                } else if (!file.startsWith('pre-key-')) {
                    // Si no es un archivo pre-key, se considera un archivo residual y se elimina.
                    // Esto cubre otros archivos que Baileys pueda generar que no sean creds.json o pre-key.
                    await unlink(filePath);
                    console.log(chalk.green(`[üóëÔ∏è] Archivo residual de sesi√≥n eliminado: ${file}`));
                    cleanedFilesCount++;
                } else {
                    // console.log(chalk.yellow(`[‚ÑπÔ∏è] Manteniendo pre-key activa: ${file}`));
                }
            } catch (err) {
                console.error(chalk.red(`[‚ö†] Error al procesar o eliminar ${file} en ${sessionDir}: ${err.message}`));
            }
        }
        if (cleanedFilesCount > 0) {
            console.log(chalk.cyanBright(`[üîµ] Limpieza de sesi√≥n completada. Archivos eliminados: ${cleanedFilesCount}`));
        } else {
            console.log(chalk.bold.green(`[üîµ] No se encontraron archivos de sesi√≥n no esenciales o antiguos para eliminar.`));
        }

    } catch (err) {
        console.error(chalk.red(`[‚ö†] Error general al limpiar la sesi√≥n principal: ${err.message}`));
    }
}

// Funci√≥n para hacer preguntas en la consola (mejorada para coincidir con el readline de tu main (2).js)
let rl = createInterface({
    input: process.stdin,
    output: process.stdout,
    terminal: true,
})

const question = (texto) => {
    rl.clearLine(rl.input, 0)
    return new Promise((resolver) => {
        rl.question(texto, (respuesta) => {
            rl.clearLine(rl.input, 0)
            resolver(respuesta.trim())
        })
    })
}

// Funci√≥n de validaci√≥n de n√∫mero de tel√©fono (copiada de tu main (2).js)
async function isValidPhoneNumber(number) {
    try {
        number = number.replace(/\s+/g, '')
        // Si el n√∫mero empieza con '+521' o '+52 1', quitar el '1'
        if (number.startsWith('+521')) {
            number = number.replace('+521', '+52'); // Cambiar +521 a +52
        } else if (number.startsWith('+52') && number[4] === '1') {
            number = number.replace('+52 1', '+52'); // Cambiar +52 1 a +52
        }
        const parsedNumber = phoneUtil.parseAndKeepRawInput(number)
        return phoneUtil.isValidNumber(parsedNumber)
    } catch (error) {
        return false
    }
}

// Funci√≥n para redefinir los m√©todos de consola y filtrar mensajes (tal como en tu original main (2).js)
const filterStrings = [
    "Q2xvc2luZ2ggc3RhYmxlIG9wZW4=", // "Closing stable open"
    "Q2xvc2luZyBvcGVuIHNlc3Npb24=", // "Closing open session"
    "RmFpbGVkIHRvIGRlY3J5cHQ=", // "Failed to decrypt"
    "U2Vzc2lvbiBlcnJvcg==", // "Session error"
    "RXJyb3I6IEJhZCBNQUM=", // "Error: Bad MAC"
    "RGVjcnlwdGVkIG1lc3NhZ2U=" // "Decrypted message"
]

function redefineConsoleMethod(methodName, filterStrings) {
    const originalConsoleMethod = console[methodName]
    console[methodName] = function() {
        const message = arguments[0]
        if (typeof message === 'string' && filterStrings.some(filterString => message.includes(atob(filterString)))) {
            arguments[0] = ""
        }
        originalConsoleMethod.apply(console, arguments)
    }
}

console.info = () => {}
console.debug = () => {}
['log', 'warn', 'error'].forEach(methodName => redefineConsoleMethod(methodName, filterStrings))


// --- Funci√≥n Principal de Conexi√≥n ---
async function startBot() {
    // Obtener la √∫ltima versi√≥n de Baileys
    const { version, isLatest } = await fetchLatestBaileysVersion() // <-- CORRECCI√ìN AQU√ç: eliminado el espacio en 'is latest'
    console.log(chalk.cyan(`[‚ÑπÔ∏è] Usando Baileys v${version.join('.')}${!isLatest ? ' (no es la √∫ltima, considerar actualizar)' : ''}`));


    // 1. Analizar los argumentos de l√≠nea de comandos para ver si se forz√≥ un modo
    const argv = yargs(process.argv.slice(2)).parse();
    
    // Variables de control de tu main (2).js
    let phoneNumber = null; // Puedes definir global.botNumberCode si quieres un n√∫mero por defecto
    const methodCodeQR = process.argv.includes("qr"); // `node . --qr`
    const methodCode = !!phoneNumber || process.argv.includes("code"); // `node . --code` o si phoneNumber ya est√° definido
    const MethodMobile = process.argv.includes("mobile"); // `node . --mobile`

    let opcion; // Variable para almacenar la elecci√≥n del usuario (1 o 2)

    // Si se usa 'npm run qr' o 'node . --qr', se fuerza la opci√≥n 1 (QR)
    if (methodCodeQR) {
        opcion = '1';
    }

    // --- L√≥gica Interactiva para elegir tipo de conexi√≥n (copiada de tu main (2).js) ---
    // Este es el bloque que pregunta al usuario si quiere QR o c√≥digo de 8 d√≠gitos.
    if (!methodCodeQR && !methodCode && !existsSync('./sessions/creds.json')) {
        do {
            let lineM = '‚ãØ ‚ãØ ‚ãØ ‚ãØ ‚ãØ ‚ãØ ‚ãØ ‚ãØ ‚ãØ ‚ãØ ‚ãØ „Äã'
            opcion = await question(`‚ï≠${lineM}  
‚îä ${chalk.blueBright('‚ï≠‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ')}
‚îä ${chalk.blueBright('‚îä')} ${chalk.blue.bgBlue.bold.cyan(mid.methodCode1)}
‚îä ${chalk.blueBright('‚ï∞‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ')}   
‚îä ${chalk.blueBright('‚ï≠‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ')}     
‚îä ${chalk.blueBright('‚îä')} ${chalk.green.bgMagenta.bold.yellow(mid.methodCode2)}
‚îä ${chalk.blueBright('‚îä')} ${chalk.bold.redBright(`‚á¢  ${mid.methodCode3} 1:`)} ${chalk.greenBright(mid.methodCode4)}
‚îä ${chalk.blueBright('‚îä')} ${chalk.bold.redBright(`‚á¢  ${mid.methodCode3} 2:`)} ${chalk.greenBright(mid.methodCode5)}
‚îä ${chalk.blueBright('‚ï∞‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ')}
‚îä ${chalk.blueBright('‚ï≠‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ')}     
‚îä ${chalk.blueBright('‚îä')} ${chalk.italic.magenta(mid.methodCode6)}
‚îä ${chalk.blueBright('‚îä')} ${chalk.italic.magenta(mid.methodCode7)}
‚îä ${chalk.blueBright('‚ï∞‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ')} 
‚îä ${chalk.blueBright('‚ï≠‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ')}    
‚îä ${chalk.blueBright('‚îä')} ${chalk.red.bgRed.bold.green(mid.methodCode8)}
‚îä ${chalk.blueBright('‚îä')} ${chalk.italic.cyan(mid.methodCode9)}
‚îä ${chalk.blueBright('‚îä')} ${chalk.italic.cyan(mid.methodCode10)}
‚îä ${chalk.blueBright('‚îä')} ${chalk.bold.yellow(`npm run qr ${chalk.italic.magenta(`(${mid.methodCode12})`)}`)}
‚îä ${chalk.blueBright('‚îä')} ${chalk.bold.yellow(`npm run code ${chalk.italic.magenta(`(${mid.methodCode13})`)}`)}
‚îä ${chalk.blueBright('‚îä')} ${chalk.bold.yellow(`npm start ${chalk.italic.magenta(`(${mid.methodCode14})`)}`)}
‚îä ${chalk.blueBright('‚ï∞‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ‚îÖ')} 
‚ï∞${lineM}\n${chalk.bold.magentaBright('---> ')}`);
            if (!/^[1-2]$/.test(opcion)) {
                console.log(chalk.bold.redBright(mid.methodCode11(chalk)));
            }
        } while (opcion !== '1' && opcion !== '2' || existsSync('./sessions/creds.json'));
    }

    const {
        state,
        saveCreds
    } = await useMultiFileAuthState('sessions');

    // Si se eligi√≥ la opci√≥n de c√≥digo, se pide el n√∫mero si no se dio por argumento
    if ((opcion === '2' || methodCode) && !existsSync('./sessions/creds.json')) {
        if (!phoneNumber) {
            let addNumber;
            do {
                phoneNumber = await question(chalk.bgBlack(chalk.bold.greenBright(mid.phNumber2(chalk))));
                addNumber = phoneNumber.replace(/\D/g, ''); // Limpia el n√∫mero
                // Manejo espec√≠fico para n√∫meros mexicanos que a veces vienen con '1' despu√©s del c√≥digo de pa√≠s
                if (addNumber.startsWith('521') && addNumber.length === 12) { 
                    addNumber = '52' + addNumber.substring(3); // Elimina el '1' despu√©s del 52
                } else if (!addNumber.startsWith('+')) {
                    addNumber = `+${addNumber}`;
                }
            } while (!await isValidPhoneNumber(addNumber));
            phoneNumber = addNumber; // Actualiza phoneNumber con el n√∫mero validado y limpiado
        }
        console.log(chalk.blue(`\nPor favor, espera. Si tu n√∫mero (${phoneNumber}) es v√°lido, se generar√° un c√≥digo de 8 d√≠gitos.`));
        console.log(chalk.green(`Ingresa este c√≥digo en tu WhatsApp m√≥vil (Vincula un Dispositivo > Vincular con n√∫mero de tel√©fono).`));
        // El c√≥digo aparecer√° autom√°ticamente en la consola, ya que Baileys lo gestiona.
    }


    const sock = makeWASocket({
        logger: P({
            level: 'silent'
        }),
        // --- CONFIGURACI√ìN CLAVE PARA QR Y C√ìDIGO DE 8 D√çGITOS EN BAILEYS ---
        // printQRInTerminal: Imprime el QR en la terminal. Se activa si se eligi√≥ opci√≥n 1 o se us√≥ --qr
        printQRInTerminal: opcion == '1' ? true : methodCodeQR ? true : false,
        mobile: MethodMobile, // Habilita modo m√≥vil si se us√≥ --mobile
        // pairingCode: Pasa el n√∫mero para generar el c√≥digo de emparejamiento.
        // Se activa si se eligi√≥ opci√≥n 2 o se us√≥ --code.
        // Solo se pasa el pairingCode si no hay credenciales existentes y se eligi√≥ esa opci√≥n.
        pairingCode: (opcion === '2' || methodCode) && !existsSync('./sessions/creds.json') ? phoneNumber : undefined,
        // --- FIN CONFIGURACI√ìN CLAVE ---
        browser: opcion == '1' ? ['LogisticBot', 'Desktop', '3.0'] : methodCodeQR ? ['LogisticBot', 'Desktop', '3.0'] : ["Ubuntu", "Chrome", "20.0.04"], // Ajusta el navegador seg√∫n la opci√≥n
        auth: state,
        generateHighQualityLinkPreview: true,
        msgRetryCounterCache,
        shouldIgnoreJid: jid => false,
        cachedGroupMetadata: (jid) => global.conn.chats[jid] ?? {}, // Asume que global.conn.chats existe y est√° poblado
        version: version, // Usar la versi√≥n obtenida din√°micamente
        keepAliveIntervalMs: 55000,
        maxIdleTimeMs: 60000,
    });

    // Asignar sock a global.conn para que las funciones de limpieza lo puedan usar
    global.conn = sock;
    
    // Asignar store a global.conn para compatibilidad con otros m√≥dulos que lo usen
    global.conn.store = store; 

    store.bind(sock.ev);

    // --- Manejo de Eventos de Conexi√≥n ---
    sock.ev.on('connection.update', async (update) => {
        const {
            connection,
            lastDisconnect,
            qr
        } = update;

        if (connection === 'close') {
            let reason = Boom.boomify(lastDisconnect?.error)?.output?.statusCode;
            let errorMessage = '';

            switch (reason) {
                case DisconnectReason.badSession:
                    errorMessage = `[‚ùå] Archivo de sesi√≥n incorrecto, por favor elimina la carpeta 'sessions' y vuelve a escanear.`;
                    process.exit();
                    break;
                case DisconnectReason.connectionClosed:
                    errorMessage = `[‚ö†Ô∏è] ${global.lenguajeGB.smsConexioncerrar()}`;
                    startBot();
                    break;
                case DisconnectReason.connectionLost:
                    errorMessage = `[‚ö†Ô∏è] ${global.lenguajeGB.smsConexionperdida()}`;
                    startBot();
                    break;
                case DisconnectReason.connectionReplaced:
                    errorMessage = `[‚ùå] ${global.lenguajeGB.smsConexionreem()}`;
                    process.exit();
                    break;
                case DisconnectReason.loggedOut:
                    errorMessage = `[‚ùå] ${global.lenguajeGB.smsConexionOFF()}`;
                    process.exit();
                    break;
                case DisconnectReason.restartRequired:
                    errorMessage = `[‚ö†Ô∏è] ${global.lenguajeGB.smsConexionreinicio()}`;
                    startBot();
                    break;
                case DisconnectReason.timedOut:
                    errorMessage = `[‚ö†Ô∏è] ${global.lenguajeGB.smsConexiontiem()}`;
                    startBot();
                    break;
                case 405: // Specific handling for 405 Connection Failure
                    errorMessage = `[‚ùå] Error de conexi√≥n (405): Posiblemente versi√≥n desactualizada o problema de red. Por favor, actualiza Baileys y verifica tu conexi√≥n a internet.`;
                    startBot();
                    break;
                default:
                    errorMessage = global.lenguajeGB.smsConexiondescon(reason, lastDisconnect.error?.message || '');
                    startBot();
                    break;
            }
            console.log(chalk.red(errorMessage));

        } else if (connection === 'open') {
            console.log(chalk.green('[‚úÖ] Conexi√≥n abierta con WhatsApp.'));
            // Env√≠a recordatorios al iniciar y luego cada 24 horas
            await sendAutomaticPaymentRemindersLogic(sock);
            setInterval(() => sendAutomaticPaymentRemindersLogic(sock), 24 * 60 * 60 * 1000); // Cada 24 horas
        }
        
        // Manejo de QR desde tu main (2).js (solo si no se us√≥ el m√©todo de c√≥digo y no hay credenciales)
        if (qr != 0 && qr != undefined && !methodCode && !existsSync('./sessions/creds.json')) {
            if (opcion == '1' || methodCodeQR) {
                console.log(chalk.bold.yellow(mid.mCodigoQR));
            }
        }
    });

    // --- Guardar Credenciales ---
    sock.ev.on('creds.update', saveCreds);

    // --- Manejo de Mensajes Entrantes ---
    sock.ev.on('messages.upsert', async (chatUpdate) => {
        try {
            const m = chatUpdate.messages[0];
            if (!m.message) return;
            if (m.key.id.startsWith('BAE5') && m.key.id.length === 16) return;
            if (m.key.remoteJid === 'status@broadcast') return;

            m.message = (Object.keys(m.message)[0] === 'ephemeralMessage') ? m.message.ephemeralMessage.message : m.message;
            m.message = (Object.keys(m.message)[0] === 'viewOnceMessage') ? m.message.viewOnceMessage.message : m.message;

            global.self = sock.user.id.split(':')[0] + '@s.whatsapp.net';

            const {
                handler
            } = await import('./handler.js');
            await handler(m, sock, store);

        } catch (e) {
            console.error(chalk.red(`[‚ùå] Error en messages.upsert: ${e.message || e}`));
        }
    });

    return sock;
}

// --- Inicio del bot y programaci√≥n de tareas de limpieza ---
startBot();

// Limpiar la carpeta 'tmp' cada 3 minutos
setInterval(async () => {
    // Solo limpiar si el bot est√° conectado
    if (global.conn && global.conn.user) {
        clearTmp();
    } else {
        // console.log(chalk.gray('[‚ÑπÔ∏è] Bot desconectado, omitiendo limpieza de tmp.'));
    }
}, 1000 * 60 * 3); // Cada 3 minutos

// Limpiar la carpeta de sesiones cada 10 minutos
setInterval(async () => {
    // Solo limpiar si el bot est√° conectado
    if (global.conn && global.conn.user) {
        await cleanMainSession();
    } else {
        // console.log(chalk.gray('[‚ÑπÔ∏è] Bot desconectado, omitiendo limpieza de sesi√≥n.'));
    }
}, 1000 * 60 * 10); // Cada 10 minutos
